/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.codegeneration.scala.macro;

import java.util.*;

public class MLexer {

  private final String pPkg;
  private final MLexer mLexer = this;
  private final List<Object> eDefaultPackage_SpecifiedPackage = new LinkedList<Object>();
  private final List<Object> eMarkerDeclaration = new LinkedList<Object>();
  private final List<Object> eSetMarkerDeclaration = new LinkedList<Object>();
  private final List<Object> eAcceptMarkerDeclaration = new LinkedList<Object>();

  public MLexer(String pPkg) {
    if(pPkg == null) throw new NullPointerException();
    this.pPkg = pPkg;
  }

  public MMarkerDeclaration newMarkerDeclaration(String pName) {
    MMarkerDeclaration lMarkerDeclaration = new MMarkerDeclaration(pName);
    this.eMarkerDeclaration.add(lMarkerDeclaration);
    return lMarkerDeclaration;
  }

  public MSetMarkerDeclaration newSetMarkerDeclaration(String pName) {
    MSetMarkerDeclaration lSetMarkerDeclaration = new MSetMarkerDeclaration(pName, mLexer);
    this.eSetMarkerDeclaration.add(lSetMarkerDeclaration);
    return lSetMarkerDeclaration;
  }

  public MAcceptMarkerDeclaration newAcceptMarkerDeclaration(String pName) {
    MAcceptMarkerDeclaration lAcceptMarkerDeclaration = new MAcceptMarkerDeclaration(pName, mLexer);
    this.eAcceptMarkerDeclaration.add(lAcceptMarkerDeclaration);
    return lAcceptMarkerDeclaration;
  }

  public MDefaultPackage newDefaultPackage(String pLanguageName) {
    MDefaultPackage lDefaultPackage = new MDefaultPackage(pLanguageName);
    this.eDefaultPackage_SpecifiedPackage.add(lDefaultPackage);
    return lDefaultPackage;
  }

  public MSpecifiedPackage newSpecifiedPackage(String pLanguageName, String pPackage) {
    MSpecifiedPackage lSpecifiedPackage = new MSpecifiedPackage(pLanguageName, pPackage);
    this.eDefaultPackage_SpecifiedPackage.add(lSpecifiedPackage);
    return lSpecifiedPackage;
  }

  String pPkg() {
    return this.pPkg;
  }

  private String rPkg() {
    return this.mLexer.pPkg();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(new MHeader().toString());
    if(this.eDefaultPackage_SpecifiedPackage.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oDefaultPackage_SpecifiedPackage : this.eDefaultPackage_SpecifiedPackage) {
      sb.append(oDefaultPackage_SpecifiedPackage.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("import java.io._");
    sb.append(System.getProperty("line.separator"));
    sb.append("import Symbol._");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("class Lexer(reader: Reader) {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  private val br = new BufferedReader(reader)");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private val buffer = new StringBuilder");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var eof = false");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var line = 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var pos = 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var last_is_cr = false");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var sb: StringBuilder = null");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var acceptLine_ = 0");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var acceptPos_ = 0");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var current_sb_length = 0");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var sb_contains_eof = false");
    sb.append(System.getProperty("line.separator"));
    for(Object oMarkerDeclaration : this.eMarkerDeclaration) {
      sb.append(oMarkerDeclaration.toString());
    }
    sb.append(System.getProperty("line.separator"));
    for(Object oSetMarkerDeclaration : this.eSetMarkerDeclaration) {
      sb.append(oSetMarkerDeclaration.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("  def next: Token = {");
    sb.append(System.getProperty("line.separator"));
    sb.append("    var token: Token = null");
    sb.append(System.getProperty("line.separator"));
    sb.append("    do {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      token = internalNext");
    sb.append(System.getProperty("line.separator"));
    sb.append("    } while (token == null)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    token");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected def internalNext: Token = {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    var first = true");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    val sb = new StringBuilder");
    sb.append(System.getProperty("line.separator"));
    sb.append("    var state: State = S_0");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    while(state.stateType == State.StateType.TRANSITION) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      val transitionState = state.asInstanceOf[TransitionState]");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("      this.current_sb_length = sb.length");
    sb.append(System.getProperty("line.separator"));
    sb.append("      transitionState.marker(this)");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("      var symbol: Symbol = null");
    sb.append(System.getProperty("line.separator"));
    sb.append("      if(buffer.length > 0) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        val c = buffer.charAt(0)");
    sb.append(System.getProperty("line.separator"));
    sb.append("        buffer.deleteCharAt(0)");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        sb.append(c)");
    sb.append(System.getProperty("line.separator"));
    sb.append("        symbol = Symbol.symbol(c)");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append("      else if(this.eof) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(sb.length == 0) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("          return new End(this.line, this.pos)");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.sb_contains_eof = true");
    sb.append(System.getProperty("line.separator"));
    sb.append("        symbol = Symbol.Symbol_end");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append("      else {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        val i = br.read");
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(i == -1) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.eof = true");
    sb.append(System.getProperty("line.separator"));
    sb.append("          br.close");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("          if(sb.length == 0) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("            return new End(this.line, this.pos)");
    sb.append(System.getProperty("line.separator"));
    sb.append("          }");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.sb_contains_eof = true");
    sb.append(System.getProperty("line.separator"));
    sb.append("          symbol = Symbol.Symbol_end");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        else {");
    sb.append(System.getProperty("line.separator"));
    sb.append("          val c = i.toChar");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("          sb.append(c)");
    sb.append(System.getProperty("line.separator"));
    sb.append("          symbol = Symbol.symbol(c)");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("      if(symbol == null) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        throw new LexerException(sb.charAt(0), this.line, this.pos)");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("      state = transitionState.target(symbol)");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("      if(state == null) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        throw new LexerException(sb.charAt(0), this.line, this.pos)");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    val finalState = state.asInstanceOf[FinalState]");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    this.sb = sb");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    finalState.token(this)");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def acceptLine = this.acceptLine_");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private def acceptLine_=(i: Int) = this.acceptLine_ = i");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def acceptPos = this.acceptPos_");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private def acceptPos_=(i: Int) = this.acceptPos_ = i");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  private def updateLinePos(text: String) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("    if(this.last_is_cr) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      if(text.length > 0) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(text.charAt(0) != 10) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.last_is_cr = false");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.line += 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.pos = 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append("      else if(this.buffer.length > 0) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(this.buffer.charAt(0) != 10) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.last_is_cr = false");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.line += 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.pos = 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    this.acceptLine = line");
    sb.append(System.getProperty("line.separator"));
    sb.append("    this.acceptPos = pos");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    for(i <- 0 until text.length) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      val c = text.charAt(i)");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("      if(c == 10) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.line += 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("        this.pos = 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append("      else {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(last_is_cr) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.line += 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.pos = 2");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        else {");
    sb.append(System.getProperty("line.separator"));
    sb.append("          this.pos += 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("      this.last_is_cr = c == 13");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def accept(backCount: Int) = {");
    sb.append(System.getProperty("line.separator"));
    sb.append("    var bc = backCount");
    sb.append(System.getProperty("line.separator"));
    sb.append("    if(this.sb_contains_eof) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      this.sb_contains_eof = false");
    sb.append(System.getProperty("line.separator"));
    sb.append("      bc -= 1");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append("    val text = this.sb.toString.substring(0, this.sb.length - bc)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    val leftover = this.sb.toString.substring(this.sb.length - bc, this.sb.length)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    this.buffer.insert(0, leftover)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    updateLinePos(text)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    text");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    for(Object oAcceptMarkerDeclaration : this.eAcceptMarkerDeclaration) {
      sb.append(oAcceptMarkerDeclaration.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
