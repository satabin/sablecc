/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.codegeneration.java.macro;

import java.util.*;

public class MSeparatedNodeList {

    private final List<Object> eDefaultPackage_SpecifiedPackage = new LinkedList<Object>();

    public MSeparatedNodeList() {

    }

    public MDefaultPackage newDefaultPackage(
            String pLanguageName) {

        MDefaultPackage lDefaultPackage = new MDefaultPackage(pLanguageName);
        this.eDefaultPackage_SpecifiedPackage.add(lDefaultPackage);
        return lDefaultPackage;
    }

    public MSpecifiedPackage newSpecifiedPackage(
            String pLanguageName,
            String pPackage) {

        MSpecifiedPackage lSpecifiedPackage = new MSpecifiedPackage(
                pLanguageName, pPackage);
        this.eDefaultPackage_SpecifiedPackage.add(lSpecifiedPackage);
        return lSpecifiedPackage;
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append(new MHeader().toString());
        if (this.eDefaultPackage_SpecifiedPackage.size() > 0) {
            sb.append(System.getProperty("line.separator"));
        }
        for (Object oDefaultPackage_SpecifiedPackage : this.eDefaultPackage_SpecifiedPackage) {
            sb.append(oDefaultPackage_SpecifiedPackage.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append("import java.util.*;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("public class SeparatedNodeList<TNodeLeft extends Node, TNodeRight extends Node>");
        sb.append(System.getProperty("line.separator"));
        sb.append("        extends Node");
        sb.append(System.getProperty("line.separator"));
        sb.append("        implements Iterable<TNodeLeft> {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    int lowerBound;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    int upperBound;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    int size = 0;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    private final int INF = -1;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    Entry<TNodeLeft> leftHeader = new Entry<TNodeLeft>(null, null, null);");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    Entry<TNodeRight> rightHeader = new Entry<TNodeRight>(null, null, null);");
        sb.append(System.getProperty("line.separator"));
        sb.append("    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("    SeparatedNodeList(){");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.leftHeader.next = this.leftHeader.previous = this.leftHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.rightHeader.next = this.rightHeader.previous = this.rightHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("    SeparatedNodeList(int lowerBound){");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.leftHeader.next = this.leftHeader.previous = this.leftHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.rightHeader.next = this.rightHeader.previous = this.rightHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.lowerBound = lowerBound;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.upperBound = INF;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("    SeparatedNodeList(int lowerBound,int upperBound){");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.leftHeader.next = this.leftHeader.previous = this.leftHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.rightHeader.next = this.rightHeader.previous = this.rightHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.lowerBound = lowerBound;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.upperBound = upperBound;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    void addLeft(");
        sb.append(System.getProperty("line.separator"));
        sb.append("            TNodeLeft element) {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        Entry<TNodeLeft> newEntry = new Entry<TNodeLeft>(element,");
        sb.append(System.getProperty("line.separator"));
        sb.append("                this.leftHeader, this.leftHeader.previous);");
        sb.append(System.getProperty("line.separator"));
        sb.append("        newEntry.previous.next = newEntry;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        newEntry.next.previous = newEntry;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.size++;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        // TODO Control list bounds");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    void addRight(");
        sb.append(System.getProperty("line.separator"));
        sb.append("            TNodeRight element) {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        Entry<TNodeRight> newEntry = new Entry<TNodeRight>(element,");
        sb.append(System.getProperty("line.separator"));
        sb.append("                this.rightHeader, this.rightHeader.previous);");
        sb.append(System.getProperty("line.separator"));
        sb.append("        newEntry.previous.next = newEntry;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        newEntry.next.previous = newEntry;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.size++;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        // TODO Control list bounds");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("     void addAll(");
        sb.append(System.getProperty("line.separator"));
        sb.append("            PairNodeList<TNodeLeft, TNodeRight> elements) {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.leftHeader.previous.next = elements.leftHeader.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        elements.leftHeader.next.previous = this.leftHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.leftHeader.previous = elements.leftHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        elements.leftHeader.previous.next = this.leftHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.rightHeader.previous.next = elements.rightHeader.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        elements.rightHeader.next.previous = this.rightHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.rightHeader.previous = elements.rightHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        elements.rightHeader.previous.next = this.rightHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.size += elements.size;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        // TODO Control list bounds");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("     void addAll(");
        sb.append(System.getProperty("line.separator"));
        sb.append("            SeparatedNodeList<TNodeLeft, TNodeRight> elements) {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.leftHeader.previous.next = elements.leftHeader.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        elements.leftHeader.next.previous = this.leftHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.leftHeader.previous = elements.leftHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        elements.leftHeader.previous.next = this.leftHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.rightHeader.previous.next = elements.rightHeader.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        elements.rightHeader.next.previous = this.rightHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.rightHeader.previous = elements.rightHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        elements.rightHeader.previous.next = this.rightHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.size += elements.size;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        // TODO Control list bounds");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("    void addAllReverse(");
        sb.append(System.getProperty("line.separator"));
        sb.append("            PairNodeList<TNodeRight, TNodeLeft> elements) {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.leftHeader.previous.next = elements.rightHeader.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            elements.leftHeader.next.previous = this.rightHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.leftHeader.previous = elements.rightHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            elements.leftHeader.previous.next = this.rightHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.rightHeader.previous.next = elements.leftHeader.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            elements.rightHeader.next.previous = this.leftHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.rightHeader.previous = elements.leftHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            elements.rightHeader.previous.next = this.leftHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.size += elements.size;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        // TODO Control list bounds");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("     void addAllReverse(");
        sb.append(System.getProperty("line.separator"));
        sb.append("            SeparatedNodeList<TNodeRight, TNodeLeft> elements) {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.leftHeader.previous.next = elements.rightHeader.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            elements.leftHeader.next.previous = this.rightHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.leftHeader.previous = elements.rightHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            elements.leftHeader.previous.next = this.rightHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.rightHeader.previous.next = elements.leftHeader.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            elements.rightHeader.next.previous = this.leftHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.rightHeader.previous = elements.leftHeader.previous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            elements.rightHeader.previous.next = this.leftHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.size += elements.size;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        // TODO Control list bounds");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("    NodeList<TNodeLeft> getLeft(){");
        sb.append(System.getProperty("line.separator"));
        sb.append("        NodeList<TNodeLeft> list = new NodeList<TNodeLeft>();");
        sb.append(System.getProperty("line.separator"));
        sb.append("        Iterator<TNodeLeft> leftIterator = this.iterator();");
        sb.append(System.getProperty("line.separator"));
        sb.append("        ");
        sb.append(System.getProperty("line.separator"));
        sb.append("        while(leftIterator.hasNext()){");
        sb.append(System.getProperty("line.separator"));
        sb.append("            list.add(leftIterator.next());");
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append("        ");
        sb.append(System.getProperty("line.separator"));
        sb.append("        return list;    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("    NodeList<TNodeRight> getRight(){");
        sb.append(System.getProperty("line.separator"));
        sb.append("        NodeList<TNodeRight> list = new NodeList<TNodeRight>();");
        sb.append(System.getProperty("line.separator"));
        sb.append("        Iterator<TNodeRight> rightIterator = this.separatorIterator();");
        sb.append(System.getProperty("line.separator"));
        sb.append("        ");
        sb.append(System.getProperty("line.separator"));
        sb.append("        while(rightIterator.hasNext()){");
        sb.append(System.getProperty("line.separator"));
        sb.append("            list.add(rightIterator.next());");
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append("        ");
        sb.append(System.getProperty("line.separator"));
        sb.append("        return list;    ");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("    public Iterator<TNodeLeft> iterator() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        return new LeftNodeListItr();");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    public Iterator<TNodeRight> separatorIterator() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        return new RightNodeListItr();");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    public int size() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        return this.size;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("    public Type getType() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        return Type.TAnonymous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("    public String getText() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        return \"\";");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("    public int getLine() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        return 0;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("    public int getPos() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        return 0;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("    public void apply(");
        sb.append(System.getProperty("line.separator"));
        sb.append("            Walker walker) {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        this.applyOnChildren(walker);");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("    public void applyOnChildren(");
        sb.append(System.getProperty("line.separator"));
        sb.append("            Walker walker) {");
        sb.append(System.getProperty("line.separator"));
        sb.append("            ");
        sb.append(System.getProperty("line.separator"));
        sb.append("        Iterator<TNodeLeft> leftIterator = iterator();");
        sb.append(System.getProperty("line.separator"));
        sb.append("        Iterator<TNodeRight> rightIterator = separatorIterator();");
        sb.append(System.getProperty("line.separator"));
        sb.append("        ");
        sb.append(System.getProperty("line.separator"));
        sb.append("        leftIterator.next().apply(walker);");
        sb.append(System.getProperty("line.separator"));
        sb.append("        ");
        sb.append(System.getProperty("line.separator"));
        sb.append("        while(leftIterator.hasNext()){");
        sb.append(System.getProperty("line.separator"));
        sb.append("            rightIterator.next().apply(walker);");
        sb.append(System.getProperty("line.separator"));
        sb.append("            leftIterator.next().apply(walker);");
        sb.append(System.getProperty("line.separator"));
        sb.append("            ");
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    private class LeftNodeListItr");
        sb.append(System.getProperty("line.separator"));
        sb.append("            implements Iterator<TNodeLeft> {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        private int cursor = 0;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        private int size;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        private Entry<TNodeLeft> current;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        LeftNodeListItr() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.current = SeparatedNodeList.this.leftHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.size = size() / 2 + 1;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("        public boolean hasNext() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            return this.cursor != this.size;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("        public TNodeLeft next() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.cursor++;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.current = this.current.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            return this.current.element;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("        public void remove() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("    private class RightNodeListItr");
        sb.append(System.getProperty("line.separator"));
        sb.append("            implements Iterator<TNodeRight> {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        private int cursor = 0;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        private int size;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        private Entry<TNodeRight> current;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        RightNodeListItr() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.current = SeparatedNodeList.this.rightHeader;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.size = size() / 2;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("        public boolean hasNext() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            return this.cursor != size;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("        public TNodeRight next() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.cursor++;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            this.current = this.current.next;");
        sb.append(System.getProperty("line.separator"));
        sb.append("            return this.current.element;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("        public void remove() {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("        }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("}");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
