/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.codegeneration.scala;

import java.util.*;

public class MTest {

  private final List<Object> eDefaultPackage_SpecifiedPackage = new LinkedList<Object>();

  public MTest() {
  }

  public MDefaultPackage newDefaultPackage(String pLanguageName) {
    MDefaultPackage lDefaultPackage = new MDefaultPackage(pLanguageName);
    this.eDefaultPackage_SpecifiedPackage.add(lDefaultPackage);
    return lDefaultPackage;
  }

  public MSpecifiedPackage newSpecifiedPackage(String pLanguageName, String pPackage) {
    MSpecifiedPackage lSpecifiedPackage = new MSpecifiedPackage(pLanguageName, pPackage);
    this.eDefaultPackage_SpecifiedPackage.add(lSpecifiedPackage);
    return lSpecifiedPackage;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(new MHeader().toString());
    if(this.eDefaultPackage_SpecifiedPackage.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oDefaultPackage_SpecifiedPackage : this.eDefaultPackage_SpecifiedPackage) {
      sb.append(oDefaultPackage_SpecifiedPackage.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("import java.io._");
    sb.append(System.getProperty("line.separator"));
    sb.append("object Test {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  def main(args: Array[String]) {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    val in = ");
    sb.append(System.getProperty("line.separator"));
    sb.append("      if(args.length > 0)");
    sb.append(System.getProperty("line.separator"));
    sb.append("	new FileReader(args(0))");
    sb.append(System.getProperty("line.separator"));
    sb.append("      else");
    sb.append(System.getProperty("line.separator"));
    sb.append("        new InputStreamReader(System.in)");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    val syntaxTree = new Parser(in).parse");
    sb.append(System.getProperty("line.separator"));
    sb.append("    println()");
    sb.append(System.getProperty("line.separator"));
    sb.append("    new Traverser() {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      override def traverse(node: Node) = node match {");
    sb.append(System.getProperty("line.separator"));
    sb.append("        case _: Token =>");
    sb.append(System.getProperty("line.separator"));
    sb.append("          println(node.tpe + \":\\\"\" + node.text + \"\\\"@(\" + node.pos + \")\");");
    sb.append(System.getProperty("line.separator"));
    sb.append("        case _ => super.traverse(node)");
    sb.append(System.getProperty("line.separator"));
    sb.append("      }");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }.traverse(syntaxTree)");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
