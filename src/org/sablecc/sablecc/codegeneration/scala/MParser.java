/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.codegeneration.scala;

import java.util.*;

public class MParser {

  private final String pPkg;
  private final MParser mParser = this;
  private final List<Object> eDefaultPackage_SpecifiedPackage = new LinkedList<Object>();
  private final List<Object> eLrStateSingleton = new LinkedList<Object>();

  public MParser(String pPkg) {
    if(pPkg == null) throw new NullPointerException();
    this.pPkg = pPkg;
  }

  public MLrStateSingleton newLrStateSingleton(String pNumber) {
    MLrStateSingleton lLrStateSingleton = new MLrStateSingleton(pNumber, mParser);
    this.eLrStateSingleton.add(lLrStateSingleton);
    return lLrStateSingleton;
  }

  public MDefaultPackage newDefaultPackage(String pLanguageName) {
    MDefaultPackage lDefaultPackage = new MDefaultPackage(pLanguageName);
    this.eDefaultPackage_SpecifiedPackage.add(lDefaultPackage);
    return lDefaultPackage;
  }

  public MSpecifiedPackage newSpecifiedPackage(String pLanguageName, String pPackage) {
    MSpecifiedPackage lSpecifiedPackage = new MSpecifiedPackage(pLanguageName, pPackage);
    this.eDefaultPackage_SpecifiedPackage.add(lSpecifiedPackage);
    return lSpecifiedPackage;
  }

  String pPkg() {
    return this.pPkg;
  }

  private String rPkg() {
    return this.mParser.pPkg();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(new MHeader().toString());
    if(this.eDefaultPackage_SpecifiedPackage.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oDefaultPackage_SpecifiedPackage : this.eDefaultPackage_SpecifiedPackage) {
      sb.append(oDefaultPackage_SpecifiedPackage.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("import java.io._");
    sb.append(System.getProperty("line.separator"));
    sb.append("import java.util._");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("class Parser(reader: Reader) {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  private val lexer = new Lexer(reader)");
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] val stack = new ParseStack");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  def parse: Node = {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    var tree: Node = null");
    sb.append(System.getProperty("line.separator"));
    sb.append("    while(tree == null) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      tree = stack.state(this)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    tree");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  private val lookList = new LinkedList[Token]");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def look(distance: Int) = {");
    sb.append(System.getProperty("line.separator"));
    sb.append("    while(lookList.size < distance) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      lookList.addLast(lexer.next)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append("    lookList.get(distance - 1)");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def shift {");
    sb.append(System.getProperty("line.separator"));
    sb.append("    val token =");
    sb.append(System.getProperty("line.separator"));
    sb.append("      if(lookList.size > 0)");
    sb.append(System.getProperty("line.separator"));
    sb.append("	lookList.removeFirst");
    sb.append(System.getProperty("line.separator"));
    sb.append("      else");
    sb.append(System.getProperty("line.separator"));
    sb.append("	lexer.next");
    sb.append(System.getProperty("line.separator"));
    sb.append("    stack.push(token, stack.state.target(token))");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("protected[");
    sb.append(rPkg());
    sb.append("] class ParseStack {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  import ParseStack._");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var stack = new ParseStackEntry(null, null, L0)");
    sb.append(System.getProperty("line.separator"));
    sb.append("  private var freeList: ParseStackEntry = _");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def push(node: Node, state: LRState) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("    var entry: ParseStackEntry = null");
    sb.append(System.getProperty("line.separator"));
    sb.append("    if(freeList != null) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      entry = freeList");
    sb.append(System.getProperty("line.separator"));
    sb.append("      freeList = freeList.previous");
    sb.append(System.getProperty("line.separator"));
    sb.append("      entry.set(stack, node, state)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append("    else {");
    sb.append(System.getProperty("line.separator"));
    sb.append("      entry = new ParseStackEntry(stack, node, state)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    sb.append("    stack = entry");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def state: LRState = stack.state");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def pop = {");
    sb.append(System.getProperty("line.separator"));
    sb.append("    val node = stack.node");
    sb.append(System.getProperty("line.separator"));
    sb.append("    val entry = stack");
    sb.append(System.getProperty("line.separator"));
    sb.append("    stack = stack.previous");
    sb.append(System.getProperty("line.separator"));
    sb.append("    entry.set(freeList, null, null)");
    sb.append(System.getProperty("line.separator"));
    sb.append("    freeList = entry");
    sb.append(System.getProperty("line.separator"));
    sb.append("    node");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("protected[");
    sb.append(rPkg());
    sb.append("] object ParseStack {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  class ParseStackEntry(var previous: ParseStackEntry, var node: Node, var state: LRState) {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("    def set(");
    sb.append(System.getProperty("line.separator"));
    sb.append("        previous: ParseStackEntry,");
    sb.append(System.getProperty("line.separator"));
    sb.append("        node: Node,");
    sb.append(System.getProperty("line.separator"));
    sb.append("        state: LRState) {");
    sb.append(System.getProperty("line.separator"));
    sb.append("     this.previous = previous;");
    sb.append(System.getProperty("line.separator"));
    sb.append("     this.node = node;");
    sb.append(System.getProperty("line.separator"));
    sb.append("     this.state = state;");
    sb.append(System.getProperty("line.separator"));
    sb.append("   }");
    sb.append(System.getProperty("line.separator"));
    sb.append("  }");
    sb.append(System.getProperty("line.separator"));
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("protected[");
    sb.append(rPkg());
    sb.append("] abstract class LRState {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def apply(parser: Parser): Node");
    sb.append(System.getProperty("line.separator"));
    sb.append("  protected[");
    sb.append(rPkg());
    sb.append("] def target(node: Node): LRState");
    sb.append(System.getProperty("line.separator"));
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    for(Object oLrStateSingleton : this.eLrStateSingleton) {
      sb.append(oLrStateSingleton.toString());
    }
    return sb.toString();
  }

}
